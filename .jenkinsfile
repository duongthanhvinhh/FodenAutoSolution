pipeline {
    agent any
    parameters {
        string(name: 'StoryId', defaultValue: '', description: 'Input User Story Id')
        string(name: 'XmlSuite', defaultValue: '', description: 'Test Suite (e.g., testng)')
    }
    tools {
        maven 'MAVEN_HOME' // Ensure this matches the Maven installation name in Jenkins
        allure 'ALLURE_REPORT'
    }
    environment {
        ALLURE_RESULTS_DIR = "allure-results-${env.BUILD_NUMBER}"
        SUDO_PASSWORD = credentials('your-credentials-id')
    }
    stages {
        stage('Prepare Workspace') {
            steps {
                sh 'mkdir -p ${ALLURE_RESULTS_DIR}'
            }
        }
        stage('Check Python Installation') {
            steps {
                script {
                    node {
                        sh '''
                            echo "Checking Python installation"
                            which python3 || exit 1
                            python3 --version || exit 1
                        '''
                    }
                }
            }
        }
        stage('Create Virtual Environment') {
            steps {
                script {
                    node {
                        if (true) {
                            def osName = sh(script: 'uname', returnStdout: true).trim()
                            if (osName == 'Linux') {
                                sh '''
                                    echo "${SUDO_PASSWORD}" | sudo -S apt-get update || exit 1
                                    echo "${SUDO_PASSWORD}" | sudo -S apt-get install -y python3-venv || exit 1
                                    echo "Creating virtual environment"
                                    python3 -m venv myenv || exit 1
                                    echo "Contents of myenv directory:"
                                    ls -l myenv || exit 1
                                '''
                            } else if (osName == 'Darwin') {
                                sh '''
                                    echo "${SUDO_PASSWORD}" | sudo -S brew update || exit 1
                                    echo "${SUDO_PASSWORD}" | sudo -S brew install python3 || exit 1
                                    echo "Creating virtual environment"
                                    python3 -m venv myenv || exit 1
                                    echo "Contents of myenv directory:"
                                    ls -l myenv || exit 1
                                '''
                            }
                        } else {
                            bat '''
                                @echo off
                                REM Windows commands here
                                python -m venv myenv || exit /b 1
                                echo "Contents of myenv directory:"
                                dir myenv || exit /b 1
                            '''
                        }
                    }
                }
            }
        }
        stage('Activate Virtual Environment and Install Packages') {
            steps {
                script {
                    node {
                        if (true) {
                            sh '''
                                echo "Activating virtual environment"
                                . myenv/bin/activate || exit 1
                                echo "Installing Docker package"
                                pip install docker || exit 1
                            '''
                        } else {
                            bat '''
                                call myenv\\Scripts\\activate || exit /b 1
                                pip install docker || exit /b 1
                            '''
                        }
                    }
                }
            }
        }
        stage('Start Selenium Grid') {
            steps {
                script {
                    node {
                        if (true) {
                            sh '''
                                echo "Activating virtual environment for Selenium Grid setup"
                                . myenv/bin/activate || exit 1
                                echo "${SUDO_PASSWORD}" | sudo -S bash -c 'source myenv/bin/activate && python3 start_docker_desktop.py' || exit 1
                                echo "${SUDO_PASSWORD}" | sudo -S bash -c 'source myenv/bin/activate && docker-compose up -d' || exit 1
                                echo "${SUDO_PASSWORD}" | sudo -S bash -c 'source myenv/bin/activate && python3 check_container_status.py' || exit 1
                            '''
                        } else {
                            bat '''
                                call myenv\\Scripts\\activate || exit /b 1
                                REM Windows commands for starting Selenium Grid
                            '''
                        }
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    node {
                        def storyId = params.StoryId
                        def xmlSuite = params.XmlSuite
                        if (true) {
                            sh """
                                . myenv/bin/activate || exit 1
                                echo "StoryId: ${storyId}"
                                echo "XmlSuite: ${xmlSuite}"
                                echo "mvn clean test -DsuiteXmlFile=${xmlSuite}.xml -Dgroups=${storyId} -Dallure.results.directory=${env.ALLURE_RESULTS_DIR}"
                                mvn clean test -DsuiteXmlFile=${xmlSuite}.xml -Dgroups=${storyId} -Dallure.results.directory=${env.ALLURE_RESULTS_DIR} || exit 1
                            """
                        } else {
                            bat """
                                call myenv\\Scripts\\activate || exit /b 1
                                echo StoryId: ${storyId}
                                echo XmlSuite: ${xmlSuite}
                                mvn clean test -DsuiteXmlFile=${xmlSuite}.xml -Dgroups=${storyId} -Dallure.results.directory=${env.ALLURE_RESULTS_DIR} || exit /b 1
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                node {
                    if (true) {
                        sh '''
                            echo "Activating virtual environment for cleanup"
                            . myenv/bin/activate
                            echo "Access myenv successfully"
                            echo "${SUDO_PASSWORD}" | sudo -S bash -c 'source myenv/bin/activate && docker-compose down' || exit 1
                            echo "${SUDO_PASSWORD}" | sudo -S bash -c 'source myenv/bin/activate && python3 stop_docker_desktop.py' || exit 1
                        '''
                    } else {
                        bat '''
                            call myenv\\Scripts\\activate || exit /b 1
                            REM Windows commands for stopping Selenium Grid
                        '''
                    }
                    allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: "${ALLURE_RESULTS_DIR}"]]
                    ])
                }
            }
        }
    }
}
